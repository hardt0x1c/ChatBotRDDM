import csv
import text.messages as msg
import keyboards.admin_keyboard as kb_admin
from config import *
from States.Admin import *
from aiogram import types
from aiogram.filters import Text
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, FSInputFile
from loader import dp, bot, db


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message(Command('admin'))
async def admin(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer(msg.greet_admin, reply_markup=kb_admin.admin_panel)
    else:
        await message.answer(msg.no_permission, reply_markup=kb_admin.back_menu_inline)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.message(Text('üéô –†–∞—Å—Å—ã–ª–∫–∞'))
async def send_spam(message: types.Message, state: FSMContext):
    if message.from_user.id == admin_id:
        await state.set_state(Admin.spam)
        await message.answer('–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.', reply_markup=ReplyKeyboardRemove())
        await message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–∏—Ñ.\n'
                             '–ù–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ!', reply_markup=kb_admin.back_menu_inline)
    else:
        await message.answer(msg.no_permission, reply_markup=kb_admin.back_menu_inline)


@dp.message(Admin.spam)
async def start_spam(message: types.Message, state: FSMContext):
    message_for_spam = message.html_text
    users = db.get_users()
    counter = 0
    errors = 0

    if types.ContentType.TEXT == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
        for i in range(len(users)):
            try:
                await bot.send_message(users[i][0], message_for_spam, parse_mode='html')
                counter += 1
            except Exception:
                errors += 1
                continue

        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–∞—Ç–æ–≤: {counter}',
                             reply_markup=kb_admin.back_menu_inline)
        await state.clear()

    elif types.ContentType.PHOTO == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        for i in range(len(users)):
            try:
                await bot.send_photo(users[i][0],
                                     message.photo[-1].file_id,
                                     caption=message.html_text if message.caption else None,
                                     parse_mode='html'
                                     )
                counter += 1
            except Exception:
                errors += 1
                continue

        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–∞—Ç–æ–≤: {counter}',
                             reply_markup=kb_admin.back_menu_inline)
        await state.clear()

    elif types.ContentType.VIDEO == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ
        for i in range(len(users)):
            try:
                await bot.send_video(users[i][0],
                                     message.video.file_id,
                                     caption=message.html_text if message.caption else None,
                                     parse_mode='html'
                                     )
                counter += 1
            except Exception:
                errors += 1
                continue

        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–∞—Ç–æ–≤: {counter}',
                             reply_markup=kb_admin.back_menu_inline)
        await state.clear()

    elif types.ContentType.ANIMATION == message.content_type:  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª gif
        for i in range(len(users)):
            try:
                await bot.send_animation(users[i][0],
                                         message.animation.file_id,
                                         caption=message.html_text if message.caption else None,
                                         parse_mode='html'
                                         )
                counter += 1
            except Exception:
                errors += 1
                continue

        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–∞—Ç–æ–≤: {counter}',
                             reply_markup=kb_admin.back_menu_inline)
        await state.clear()

    else:
        await message.answer('<b>‚ùóÔ∏è –î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!</b>')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(Text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
async def send_stats(message: types.Message):
    if message.from_user.id == admin_id:
        users = db.get_users()
        count = len(users)
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}', reply_markup=kb_admin.back_menu_inline)
    else:
        await message.answer(msg.no_permission, reply_markup=kb_admin.back_menu_inline)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìú –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
@dp.message(Text('üìú –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'))
async def send_db(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer('–ò–¥–µ—Ç –≤—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –ë–î')
        users_data = db.get_users_data()
        if users_data:
            # –ü—É—Ç—å –¥–æ CSV —Ñ–∞–π–ª–∞
            csv_file = 'data/users_answers/users_data.csv'

            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –∑–∞–ø–∏—Å—å
                with open(csv_file, 'w', newline='') as file:
                    writer = csv.writer(file)

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    writer.writerow(
                        ['id', 'user_id', 'username', 'name', 'surname', 'first_question', 'second_question',
                         'third_question'])

                    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±—Ü—ã
                    for row in users_data:
                        writer.writerow(row)
                file = FSInputFile(csv_file)
                await message.answer_document(file, caption='–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!')
            except Exception as ex:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ CSV: {ex}")
        else:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î')
    else:
        await message.answer(msg.no_permission, reply_markup=kb_admin.back_menu_inline)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–∞ "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.callback_query(Text('back_menu_inline'))
async def back_menu_inline(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id == admin_id:
        await state.clear()
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=kb_admin.admin_panel)
    else:
        await state.clear()
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=ReplyKeyboardRemove())
